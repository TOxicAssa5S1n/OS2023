Slip – 11
Q.1 Write a C program to simulate Banker’s algorithm for the purpose of
deadlock avoidance. the following snapshot of system, A, B, C and D are the
resource type.
Process	Allocation	Max	Available
	A	B	C	A	B	C	A	B	C
P0	0	1	0	0	0	0	0	0	0
P1	2	0	0	2	0	2			
P2	3	0	3	0	0	0			
P3	2	1	1	1	0	0			
P4	0	0	2	0	0	2			
Implement the following Menu.
a) Accept Available
b) Display Allocation, Max
c) Display the contents of need matrix
d) Display Available
Ans 
#include<stdio.h> 
int A[10][10], M[10][10], N[10][10]; 
int AV[10], Safe[10], Finish[10], R[10][10], nor, nop; 
void AcceptData(intX[][10]) 
{ 
int i, j; 
for (i = 0; i < nop; i++) 
{ 
printf("P%d\n", i); 
for (j = 0; j < nor; j++) 
{ 
printf("%c:", 65 + j); scanf("%d", &X[i][j]);
} 
} 
} 
void AcceptAvailable() 
{ 
int i; 
for (i = 0; i < nor; i++) 
{ 
printf("%c:", 65 + i); 
scanf("%d", &AV[i]); 
} 
} 
void AcceptRequest(intR[][10]) 
{ 
int i; 
for (i = 0; i < nor; i++) 
{ 
printf("%c:", 65 + i); 
scanf("%d", &R[i]); 
} 
} 
void DisplayData() 
{ 
int i, j; printf("\n\tAllocation\t\tMax\t\tNeed\n"); printf("\t"); 
for (i = 0; i < 3; i++) 
{ 
for (j = 0; j < nor; j++) 
{ 
printf("%4c", 65 + j); 
} 
printf("\t"); 
} 
for (i = 0; i < nop; i++)
{ 
printf("\nP%d\t", i); 
for (j = 0; j < nor; j++) 
{ 
printf("%4d", A[i][j]); 
} 
printf("\t"); 
 
for (j = 0; j < nor; j++) 
{ 
printf("%4d", M[i][j]); 
} 
printf("\t"); 

for (j = 0; j < nor; j++) printf("%4d", N[i][j]); 
} 
printf("\nAvailable\n"); for (j = 0; j < nor; j++) 
{ 
printf("%4d", AV[j]); 
} 
} 

void CalcNeed() 
{ 
int i, j; 
for (i = 0; i < nop; i++) 
{ 
for (j = 0; j < nor; j++) 
{ 
N[i][j] = M[i][j] - A[i][j]; 
} 
} 
} 
int CheckNeed(intpno)
{
int i; 
for (i = 0; i < nor; i++) 
{ 
if (N[pno][i] > AV[i]) 
{ 
return 0; 
} 
} 
return 1; 
} 
int main() 
{ 
printf("\nEnter Number of Process :"); scanf("%d", &nop); 
printf("\nEnter Number of Resources :"); scanf("%d", &nor); 
printf("Enter Allocation\n"); AcceptData(A); 
printf("Enter MAX Requirement\n"); AcceptData(M); 
printf("Enter Availability\n"); AcceptAvailable(); 
CalcNeed(); DisplayData(); 



Q.2 Write an MPI program to find the min number from randomly generated 1000 numbers
(stored in array) on a cluster (Hint: Use MPI_Reduce)

Ans 
 #include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
#define ARRAY_SIZE 1000 
int main(int argc, char *argv[]) { 
int rank, size; 
int i, min, max; 
int data[ARRAY_SIZE]; 
int local_min, local_max; 
MPI_Init(&argc, &argv); 
MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
MPI_Comm_size(MPI_COMM_WORLD, &size); 
// Generate random data on root process 
if (rank == 0) { 
printf("Generating random data...\n"); 
for (i = 0; i < ARRAY_SIZE; i++) { 
data[i] = rand() % 100; 
} 
} 
// Scatter data to all processes 
MPI_Scatter(data, ARRAY_SIZE/size, MPI_INT, data, ARRAY_SIZE/size, MPI_INT, 0, MPI_COMM_WORLD); 
// Calculate local min and max 
local_min = data[0]; 
local_max = data[0]; 
for (i = 1; i < ARRAY_SIZE/size; i++) { 
if (data[i] < local_min) { 
local_min = data[i]; 
} 
if (data[i] > local_max) { 
local_max = data[i]; 
} 
} 
// Reduce local min and max to get the final min and max 
MPI_Reduce(&local_min, &min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD); 
MPI_Reduce(&local_max, &max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD); 
// Print the final min and max on root process 
if (rank == 0) { 
printf("The minimum number is: %d\n", min); 
printf("The maximum number is: %d\n", max); 
} 
MPI_Finalize(); 
return 0; 
