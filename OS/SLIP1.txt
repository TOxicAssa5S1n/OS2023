SLIP1:

Q.1 ) Write a C Menu driven Program to implement following functionality
a) Accept Available
b) Display Allocation, Max
c) Display the contents of need matrix
Process	Allocation	Max	Available
	A	B	C	A	B	C	A	B	C
P0	2	3	2	9	7	5	3	3	2
P1	4	0	0	5	2	2			
P2	5	0	4	1	0	4			
P3	4	3	3	4	4	4			
P4	2	2	4	6	5	5			
d) Display Available

Ans  


 Source Code – 
#include<stdio.h> 
int A[10][10], M[10][10], N[10][10]; 
int AV[10], Safe[10], Finish[10], R[10][10], nor, nop; 
void AcceptData(intX[][10]) 
{ 
int i, j; 
for (i = 0; i < nop; i++) 
{ 
printf("P%d\n", i); 
for (j = 0; j < nor; j++) 
{ 
printf("%c:", 65 + j); scanf("%d", &X[i][j]);
} 
} 
} 
void AcceptAvailable() 
{ 
int i; 
for (i = 0; i < nor; i++) 
{ 
printf("%c:", 65 + i); 
scanf("%d", &AV[i]); 
} 
} 
void AcceptRequest(intR[][10]) 
{ 
int i; 
for (i = 0; i < nor; i++) 
{ 
printf("%c:", 65 + i); 
scanf("%d", &R[i]); 
} 
} 
void DisplayData() 
{ 
int i, j; printf("\n\tAllocation\t\tMax\t\tNeed\n"); printf("\t"); 
for (i = 0; i < 3; i++) 
{ 
for (j = 0; j < nor; j++) 
{ 
printf("%4c", 65 + j); 
} 
printf("\t"); 
} 
for (i = 0; i < nop; i++)

{ 
printf("\nP%d\t", i); 
for (j = 0; j < nor; j++) 
{ 
printf("%4d", A[i][j]); 
} 
printf("\t"); 
 
for (j = 0; j < nor; j++) 
{ 
printf("%4d", M[i][j]); 
} 
printf("\t"); 
 
for (j = 0; j < nor; j++) printf("%4d", N[i][j]); 
} 
printf("\nAvailable\n"); for (j = 0; j < nor; j++) 
{ 
printf("%4d", AV[j]); 
} 
} 

void CalcNeed() 
{ 
int i, j; 
for (i = 0; i < nop; i++) 
{ 
for (j = 0; j < nor; j++) 
{ 
N[i][j] = M[i][j] - A[i][j]; 
} 
} 
} 
int CheckNeed(intpno)
{
int i; 
for (i = 0; i < nor; i++) 
{ 
if (N[pno][i] > AV[i]) 
{ 
return 0; 
} 
} 
return 1; 
} 
int main() 
{ 
printf("\nEnter Number of Process :"); scanf("%d", &nop); 
printf("\nEnter Number of Resources :"); scanf("%d", &nor); 
printf("Enter Allocation\n"); AcceptData(A); 
printf("Enter MAX Requirement\n"); AcceptData(M); 
printf("Enter Availability\n"); AcceptAvailable(); 
CalcNeed(); DisplayData(); 
}
 



Output – 
Enter Number of Process : 	
Enter Number of Resources : 	3 
Enter Allocation 
P0 	A:0 	B:1 	C:0 
P1 	A:2 	B:0 	C:0 
P2 	A:3 	B:0 	C:2 
P3 	A:2 	B:1 	C:1 
P4 A:0 B:0 C:2 
Enter MAX Requirement P0 	A:7 	B:5 	C:3 
P1 	A:3 	B:2 	C:2 
P2 	A:9 	B:0 	C:2 
P3 	A:2 	B:2 	C:2 
P4 	A:4 	B:3 	C:3 
Enter Availability A:2 B:4 C:6
Allocation 	Max 	Need 
A 	B 	C 	A 	B 	C 	A 	B 	C 
P0 0 	1 	0 	7 	5 	3 	7 	4 	3 
P1 2 	0 	0 	3 	2 	2 	1 	2 	2 
P2 3 	0 	2 	9 	0 	2 	6 	0 	0 
P3 2 	1 	1 	2 	2 	2 	0 	1 	1 
P4 0 	0 	2 	4 	3 	3 	4 	3 	1 
Available 
2 4 6


Q.2 Write a simulation program for disk scheduling using FCFS algorithm. Accept
total number of disk blocks, disk request string, and current head position from the
user. Display the list of request in the order in which it is served. Also display the
total number of head moments.
55, 58, 39, 18, 90, 160, 150, 38, 184
Start Head Position: 50
Ans 
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int RQ[100],i,n,TotalHeadMoment=0,initial;
    printf("Enter the number of Requests\n");
    scanf("%d",&n);
    printf("Enter the Requests sequence\n");
    for(i=0;i<n;i++)
     scanf("%d",&RQ[i]);
    printf("Enter initial head position\n");
    scanf("%d",&initial);
    // logic for FCFS disk scheduling
    for(i=0;i<n;i++)
    {
        TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
        initial=RQ[i];
    }
    
    printf("Total head moment is %d",TotalHeadMoment);
    return 0;
    
}

Output
Enter the number of Request
8
Enter the Requests Sequence
95 180 34 119 11 123 62 64
Enter initial head position
50
Total head movement is 644

